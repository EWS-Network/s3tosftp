version: 0.2
env:
  shell: /bin/bash
  variables:
    USE_EPOCH: 0
    PUBLIC_REGISTRY: public.ecr.aws/ews-network
    REPOSITORY_NAME: s3-to-sftp
    DOCKER_CLI_EXPERIMENTAL: enabled
    TAG_RELEASE: 0

batch:
  fast-fail: false
  build-graph:
    - identifier: amd64
      env:
        compute-type: BUILD_GENERAL1_SMALL
        privileged-mode: true
        variables:
          VERSION: 3.9
          ARCH: amd64
      buildspec: .cicd/buildspec_image.yml

    - identifier: arm64v8
      env:
        type: ARM_CONTAINER
        image: aws/codebuild/amazonlinux2-aarch64-standard:2.0
        compute-type: BUILD_GENERAL1_SMALL
        privileged-mode: true
        variables:
          ARCH: arm64v8
          VERSION: 3.9
      buildspec: .cicd/buildspec_image.yml

    - identifier: manifest
      env:
        compute-type: BUILD_GENERAL1_SMALL
        privileged-mode: true
      depend-on:
        - amd64
        - arm64v8

phases:
  install:
    commands:
      - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${PUBLIC_REGISTRY}
      - if ! [ -z ${CODEBUILD_RESOLVED_SOURCE_VERSION+x} ]; then COMMIT_HASH=${CODEBUILD_RESOLVED_SOURCE_VERSION::7}; fi
      - EPOCH=`date +'%Y%m%d'`
      - IMAGE_TAG=${COMMIT_HASH:=$EPOCH}
      - if [ $USE_EPOCH -eq 1 ]; then IMAGE_TAG=$EPOCH; fi
      - |
          if ! [ -z "${CODEBUILD_WEBHOOK_TRIGGER+x}" ]; then
            echo TRIGGER is $CODEBUILD_WEBHOOK_TRIGGER
            PRE=`echo $CODEBUILD_WEBHOOK_TRIGGER|cut -d '/' -f 1`;
            echo PRE is $PRE
            echo IMAGE_TAG is $IMAGE_TAG
            if [ "${PRE}" == "tag" ]; then IMAGE_TAG=`echo $CODEBUILD_WEBHOOK_TRIGGER|cut -d '/' -f 2`; TAG_RELEASE=1 ; fi
          fi
      - echo IMAGE_TAG ends up being $IMAGE_TAG
  build:
    commands:
      - REPO_URI=${PUBLIC_REGISTRY}/${REPOSITORY_NAME}
      - echo Public Repo ${REPO_URI}
      - |
          for ARCH in "amd64" "arm64v8"; do
              TAG=${IMAGE_TAG}-${ARCH}
              echo TAG is $TAG
              docker pull ${REPO_URI}:${TAG}

          done

      - echo Publishing $IMAGE_TAG manifest
      - docker manifest create ${REPO_URI}:${IMAGE_TAG} --amend ${REPO_URI}:${IMAGE_TAG}-amd64 --amend ${REPO_URI}:${IMAGE_TAG}-arm64v8
      - docker manifest push ${REPO_URI}:${IMAGE_TAG}

      - |
          if ! [ ${TAG_RELEASE} -eq 0 ]; then
            echo Publishing latest manifest ;
            docker manifest create ${REPO_URI}:latest --amend ${REPO_URI}:${IMAGE_TAG}-amd64 --amend ${REPO_URI}:${IMAGE_TAG}-arm64v8 ;
            docker manifest push ${REPO_URI}:latest
          fi

    finally:
      - rm -rfv ~/.docker
