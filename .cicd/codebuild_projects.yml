---
Description: >-
  CodeBuild projects for S3 to SFTP

Metadata:
  Author: https://github.com/johnpreston

Parameters:

  EcrRepositoryName:
    Type: String

  CodeBuildImage:
    Type: String
    AllowedValues:
      - aws/codebuild/standard:6.0
      - aws/codebuild/standard:5.0
    Default: aws/codebuild/standard:6.0

  RepositoryOrganization:
    Type: String

  RepositoryProvider:
    Type: String
    AllowedValues:
      - GitHub
      - CodeCommit
    Default: GitHub
  RepositoryName:
    Type: String

  BuildLogsRetentionDays:
    Type: Number
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Default: 7

  ReferenceBranchName:
    Type: String
    Default: main

  ImagesBuildSpec:
    Type: String
    Default: .cicd/buildspec_manifest.yml

Mappings:
  RepoUrlPrefixes:
    GitHub:
      Prefix: https://github.com/

Conditions:
  UseGitHub: !Equals [ !Ref RepositoryProvider, 'GitHub']
  UseCodeCommit: !Equals [ !Ref RepositoryProvider, 'CodeCommit']

Resources:
  BuildLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'codebuild/pr-builds/${RepositoryName}'
      RetentionInDays: !Ref BuildLogsRetentionDays
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub 'codebuild.${AWS::URLSuffix}'
      Policies:
        - PolicyName: EcrPublicAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub '${BuildLogsGroup.Arn}'
              - Sid: CodeBuildReportsAccess
                Effect: Allow
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'
                Action:
                  - codebuild:UpdateReportGroup
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPut*
              - Sid: CodeBuildBatch
                Effect: Allow
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:*'
                Action:
                  - codebuild:StartBuild
                  - codebuild:RetryBuild

              - Sid: PublicEcrAuth
                Effect: Allow
                Resource:
                  - "*"
                Action: [
                    "ecr-public:GetAuthorizationToken",
                    "sts:GetServiceBearerToken",
                    "ecr-public:BatchCheckLayerAvailability",
                    "ecr-public:GetRepositoryPolicy",
                    "ecr-public:DescribeRepositories",
                    "ecr-public:DescribeRegistries",
                    "ecr-public:DescribeImages",
                    "ecr-public:DescribeImageTags",
                    "ecr-public:GetRepositoryCatalogData",
                    "ecr-public:GetRegistryCatalogData",
                ]

              - Sid: PublicEcrPublish
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:ecr-public::${AWS::AccountId}:repository/*"
                Action: [
                    "ecr-public:InitiateLayerUpload",
                    "ecr-public:UploadLayerPart",
                    "ecr-public:CompleteLayerUpload",
                    "ecr-public:PutImage"
                ]

  DockerImagesBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Name: !Sub "${RepositoryName}-images-build"
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref BuildLogsGroup
          Status: ENABLED
          StreamName: !Ref RepositoryName
      BadgeEnabled: True
      Artifacts:
        Type: NO_ARTIFACTS
      BuildBatchConfig:
        CombineArtifacts: False
        Restrictions:
          ComputeTypesAllowed:
            - BUILD_GENERAL1_SMALL
            - BUILD_GENERAL1_MEDIUM
          MaximumBuildsAllowed: 20
        ServiceRole: !GetAtt 'CodeBuildRole.Arn'
        TimeoutInMins: 30
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildImage
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REPOSITORY_NAME
            Value: !Ref EcrRepositoryName
            Type: PLAINTEXT
      Source:
        Type: GITHUB
        ReportBuildStatus: True
        Location: !If
          - UseGitHub
          - !Sub 'https://github.com/${RepositoryOrganization}/${RepositoryName}'
          - !Sub 'https://codecommit.${AWS::Region}.${AWS::URLSuffix}'
        InsecureSsl: False
        BuildSpec: !Ref ImagesBuildSpec
      Triggers:
        Webhook: True
        BuildType: BUILD_BATCH
        FilterGroups:
          - - Type: EVENT
              Pattern: "PULL_REQUEST_MERGED"
              ExcludeMatchedPattern: False
            - Type: HEAD_REF
              Pattern: '^refs/heads/.*$'
              ExcludeMatchedPattern: False
            - Type: BASE_REF
              Pattern: !Sub '^refs/heads/${ReferenceBranchName}$'
              ExcludeMatchedPattern: False
          - - Type: EVENT
              Pattern: "PUSH"
              ExcludeMatchedPattern: False
            - Type: HEAD_REF
              Pattern: !Sub '^refs/tags/v.*$'
              ExcludeMatchedPattern: False
